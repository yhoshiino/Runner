-Horizontal runner


Player : 
- autoRun player
- speed increasing by time (cap)
- four directions movement (limited by camera and limit)

Map :
- Obstacles ( wall(ex: spike), moving enemy, projectiles(w/ warning))
- boost : ON FIRE!!!
- Score (w/ collectibles, distance, checkpoint)
- finshed map
- infinite map (optionnal)

Menu :
- Main
- Level Selection
- Lose
- Pause
- Option

Assets :
- Player and obstacled/collectibles
- Texture Menu
- Music/sfx (Optionnal) :
    - bonus
    - death
    - music theme

Camera :
- Following camera
- shaking camera
- visual effect

Control :
- arrows, key or mouse movement
- pause button

Reference :
- geometry dash
- jetpack joyride
- rakoo's adventure



Technical aspect :
Getter
setter

Core:
    Managers:
        - Game:
            Members:
            - Keep reference of the game window
            - Keep reference of the deltaClock and deltaTime
            - Const int m_FRAME_RATE = 60
            - Const math::Vector2<int> m_logicalResolution (resolution to calculate all our distances in game, it will be automatically resized by an sf::View)
            - Keep references of all managers (std::unique_ptr<>)
            - sf::View stageView / sf::View uiView
            Methods:
            - void run() (runs the game loop)
            - void terminate() (runs code which need to be done before closing the game)
            - void pollEvents() (events SFML)
            - void centerWindow()
        - EntityManager:
                    Members:
                    - including (player, obstacles)
                    - Entity Creation and destruction
                    - Keep references of all entity (ex: Vector<std::shared_ptr> Enemy) (maybe vector<std::unique_ptr<Entity>>)
                    Methods:
                    - void updateAll(float deltatime)
                    - void drawAll(RenderWindow& window)
                    - void updateColisions() (checks collisions of all entities which are on screen => checks collision of active entities)
                    - void spawnEntity(int entityUID, math::Vector2<float> position) (creates entity, places it and adds it in its corresponding vector)
        - LevelManager:
                    Members:
                        - bool m_isLoaded
                        - int m_currentLevelUID
                        - float m_elapsedTime (the level's clock)
                        - sf::Texture m_backgroundTexture / sf::Sprite m_backgroundSprite
                        
                    Methods:
                        - void load(int levelUID) / void unload();
                        - void renderBackground()
                        - bool isLoaded()
                        - void parseLevelFile(const std::string& filePath) (reads the file. Called in load())
                        - void spawnLevelEntities() (tells to the EntityManager to call spawnEntity())
        - UIManager:
                        
Base Class: Entity:
                Members :
                - int Health
                - math::Vector2 Position, math::Vector2 Velocity, float Size, FloatRect hitbox
                - sf::Texture, sf::Sprite
                - State (Alive, Dead)
                - bool m_isActive (an entity can only be active when it is on screen)
                Methods :
                - virtual void update (float deltatime)
                - virtual void draw (sf::RenderWindow& window)
                - default constructor
                - virtual destructor
                - virtual bool isColliding(sf::FloatRect otherHitbox)
                - virtual void onHit(Entity* otherEntity);
Derived Class from Entity:
                    Player:
                    - void handleInputs (maybe in Game.hpp)
                    Obstacles:
                    - (we'll see)
                    




















